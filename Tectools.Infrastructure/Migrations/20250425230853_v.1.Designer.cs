// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Tectools.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250425230853_v.1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ComponentUserBuild", b =>
                {
                    b.Property<int>("ComponentsId")
                        .HasColumnType("int");

                    b.Property<int>("UserBuildsId")
                        .HasColumnType("int");

                    b.HasKey("ComponentsId", "UserBuildsId");

                    b.HasIndex("UserBuildsId");

                    b.ToTable("ComponentUserBuild");
                });

            modelBuilder.Entity("Tectools.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Tectools.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Tectools.Domain.Entities.Compability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ComponentCategoryAId")
                        .HasColumnType("int");

                    b.Property<int>("ComponentCategoryBId")
                        .HasColumnType("int");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryAId");

                    b.HasIndex("ComponentCategoryBId");

                    b.ToTable("Compabilities");
                });

            modelBuilder.Entity("Tectools.Domain.Entities.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AffiliateUrl")
                        .HasColumnType("longtext");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<bool>("Featured")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Components");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Component");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Tectools.Domain.Entities.UserBuild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("UserBuilds");
                });

            modelBuilder.Entity("Tectools.Domain.Entities.Cooler", b =>
                {
                    b.HasBaseType("Tectools.Domain.Entities.Component");

                    b.Property<string>("NoiseLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SocketCompatibility")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Cooler");
                });

            modelBuilder.Entity("Tectools.Domain.Entities.Cpu", b =>
                {
                    b.HasBaseType("Tectools.Domain.Entities.Component");

                    b.Property<string>("BaseClock")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BoostClock")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Cores")
                        .HasColumnType("int");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tdp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Threads")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Cpu");
                });

            modelBuilder.Entity("Tectools.Domain.Entities.Monitor", b =>
                {
                    b.HasBaseType("Tectools.Domain.Entities.Component");

                    b.Property<string>("PanelType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RefreshRate")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Monitor");
                });

            modelBuilder.Entity("Tectools.Domain.Entities.Motherboard", b =>
                {
                    b.HasBaseType("Tectools.Domain.Entities.Component");

                    b.Property<string>("Chipset")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MaxMemory")
                        .HasColumnType("int");

                    b.Property<string>("MemorySupport")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Components", t =>
                        {
                            t.Property("Socket")
                                .HasColumnName("Motherboard_Socket");
                        });

                    b.HasDiscriminator().HasValue("Motherboard");
                });

            modelBuilder.Entity("Tectools.Domain.Entities.Peripheral", b =>
                {
                    b.HasBaseType("Tectools.Domain.Entities.Component");

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Components", t =>
                        {
                            t.Property("Type")
                                .HasColumnName("Peripheral_Type");
                        });

                    b.HasDiscriminator().HasValue("Peripheral");
                });

            modelBuilder.Entity("Tectools.Domain.Entities.PowerSupply", b =>
                {
                    b.HasBaseType("Tectools.Domain.Entities.Component");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Modular")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Wattage")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PowerSupply");
                });

            modelBuilder.Entity("Tectools.Domain.Entities.Ram", b =>
                {
                    b.HasBaseType("Tectools.Domain.Entities.Component");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Modules")
                        .HasColumnType("int");

                    b.Property<string>("Speed")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Components", t =>
                        {
                            t.Property("Type")
                                .HasColumnName("Ram_Type");
                        });

                    b.HasDiscriminator().HasValue("Ram");
                });

            modelBuilder.Entity("Tectools.Domain.Entities.Storage", b =>
                {
                    b.HasBaseType("Tectools.Domain.Entities.Component");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReadSpeed")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WriteSpeed")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Components", t =>
                        {
                            t.Property("Capacity")
                                .HasColumnName("Storage_Capacity");

                            t.Property("Type")
                                .HasColumnName("Storage_Type");
                        });

                    b.HasDiscriminator().HasValue("Storage");
                });

            modelBuilder.Entity("ComponentUserBuild", b =>
                {
                    b.HasOne("Tectools.Domain.Entities.Component", null)
                        .WithMany()
                        .HasForeignKey("ComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tectools.Domain.Entities.UserBuild", null)
                        .WithMany()
                        .HasForeignKey("UserBuildsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tectools.Domain.Entities.Compability", b =>
                {
                    b.HasOne("Tectools.Domain.Entities.Category", "ComponentCategoryA")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tectools.Domain.Entities.Category", "ComponentCategoryB")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentCategoryA");

                    b.Navigation("ComponentCategoryB");
                });

            modelBuilder.Entity("Tectools.Domain.Entities.Component", b =>
                {
                    b.HasOne("Tectools.Domain.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Tectools.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
